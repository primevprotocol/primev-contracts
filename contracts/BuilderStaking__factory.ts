/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BuilderStaking,
  BuilderStakingInterface,
} from "../../../../../../contracts/BuilderStaking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "builder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minimalStake",
        type: "uint256",
      },
    ],
    name: "MinimalStakeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "builder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "searcher",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "StakeUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_builder",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_searcher",
        type: "address",
      },
    ],
    name: "getStakeAsBuilder",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_builder",
        type: "address",
      },
    ],
    name: "getStakeAsSearcher",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_builder",
        type: "address",
      },
      {
        internalType: "address",
        name: "_searcher",
        type: "address",
      },
    ],
    name: "hasMinimalStake",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "minimalStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minimalStake",
        type: "uint256",
      },
    ],
    name: "setMinimalStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_builder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f51806100206000396000f3fe6080604052600436106100705760003560e01c8063a6419e281161004e578063a6419e2814610118578063e75fa58314610155578063f340fa0114610192578063f3fef3a3146101ae57610070565b8063136fc2b3146100755780633d6ec65e146100b25780635785bbd5146100db575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610a52565b6101d7565b6040516100a99190610a98565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d49190610adf565b6101ef565b005b3480156100e757600080fd5b5061010260048036038101906100fd9190610a52565b61026e565b60405161010f9190610a98565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190610b0c565b6102f4565b60405161014c9190610b67565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190610a52565b610405565b6040516101899190610a98565b60405180910390f35b6101ac60048036038101906101a79190610a52565b61048b565b005b3480156101ba57600080fd5b506101d560048036038101906101d09190610b82565b61072f565b005b60006020528060005260406000206000915090505481565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f5980f614bd0d5d26f55eef7ec350fc66b080cd09bd38c87bcac4c4c7853d76f73382604051610263929190610bd1565b60405180910390a150565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156103fd57506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610c7d565b60405180910390fd5b80823461059f9190610ccc565b10156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610d72565b60405180910390fd5b34600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461066c9190610ccc565b925050819055507fe5c5e2e23207d40d5bc669072459c1fee64395c31fcde90a3d63432ace92c9ec8333600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161072293929190610d92565b60405180910390a1505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea90610e15565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461087f9190610e35565b925050819055507fe5c5e2e23207d40d5bc669072459c1fee64395c31fcde90a3d63432ace92c9ec8333600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161093593929190610d92565b60405180910390a160003373ffffffffffffffffffffffffffffffffffffffff168360405161096390610e9a565b60006040518083038185875af1925050503d80600081146109a0576040519150601f19603f3d011682016040523d82523d6000602084013e6109a5565b606091505b50509050806109e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e090610efb565b60405180910390fd5b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1f826109f4565b9050919050565b610a2f81610a14565b8114610a3a57600080fd5b50565b600081359050610a4c81610a26565b92915050565b600060208284031215610a6857610a676109ef565b5b6000610a7684828501610a3d565b91505092915050565b6000819050919050565b610a9281610a7f565b82525050565b6000602082019050610aad6000830184610a89565b92915050565b610abc81610a7f565b8114610ac757600080fd5b50565b600081359050610ad981610ab3565b92915050565b600060208284031215610af557610af46109ef565b5b6000610b0384828501610aca565b91505092915050565b60008060408385031215610b2357610b226109ef565b5b6000610b3185828601610a3d565b9250506020610b4285828601610a3d565b9150509250929050565b60008115159050919050565b610b6181610b4c565b82525050565b6000602082019050610b7c6000830184610b58565b92915050565b60008060408385031215610b9957610b986109ef565b5b6000610ba785828601610a3d565b9250506020610bb885828601610aca565b9150509250929050565b610bcb81610a14565b82525050565b6000604082019050610be66000830185610bc2565b610bf36020830184610a89565b9392505050565b600082825260208201905092915050565b7f4275696c64657220646964206e6f7420736574206d696e696d616c207374616b60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000610c67602183610bfa565b9150610c7282610c0b565b604082019050919050565b60006020820190508181036000830152610c9681610c5a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cd782610a7f565b9150610ce283610a7f565b9250828201905080821115610cfa57610cf9610c9d565b5b92915050565b7f526573756c74696e67207374616b65206973206c657373207468616e206d696e60008201527f696d616c00000000000000000000000000000000000000000000000000000000602082015250565b6000610d5c602483610bfa565b9150610d6782610d00565b604082019050919050565b60006020820190508181036000830152610d8b81610d4f565b9050919050565b6000606082019050610da76000830186610bc2565b610db46020830185610bc2565b610dc16040830184610a89565b949350505050565b7f42616c616e6365206973206c657373207468616e20616d6f756e740000000000600082015250565b6000610dff601b83610bfa565b9150610e0a82610dc9565b602082019050919050565b60006020820190508181036000830152610e2e81610df2565b9050919050565b6000610e4082610a7f565b9150610e4b83610a7f565b9250828203905081811115610e6357610e62610c9d565b5b92915050565b600081905092915050565b50565b6000610e84600083610e69565b9150610e8f82610e74565b600082019050919050565b6000610ea582610e77565b9150819050919050565b7f4661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000610ee5601283610bfa565b9150610ef082610eaf565b602082019050919050565b60006020820190508181036000830152610f1481610ed8565b905091905056fea2646970667358221220ef39bf6998c0f86bb6855790e989b928a541184876086472cbc85cdc348df5b964736f6c63430008120033";

type BuilderStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BuilderStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BuilderStaking__factory extends ContractFactory {
  constructor(...args: BuilderStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BuilderStaking> {
    return super.deploy(overrides || {}) as Promise<BuilderStaking>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BuilderStaking {
    return super.attach(address) as BuilderStaking;
  }
  override connect(signer: Signer): BuilderStaking__factory {
    return super.connect(signer) as BuilderStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BuilderStakingInterface {
    return new utils.Interface(_abi) as BuilderStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BuilderStaking {
    return new Contract(address, _abi, signerOrProvider) as BuilderStaking;
  }
}
